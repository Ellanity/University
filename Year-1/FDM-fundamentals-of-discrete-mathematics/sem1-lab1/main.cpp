#include <iostream>
#include <vector>

using namespace std;

void point1(vector<int> A, vector<int> B);
void point2(vector<int> A, vector<int> B);
void point3(vector<int> A, vector<int> B);
void point4(vector<int> A, vector<int> B);
void point5(vector<int> A, vector<int> B);
void point6(vector<int> A, vector<int> B, vector<int> U);
void point7(vector<int> A, vector<int> B, vector<int> U);
void point8(vector<int> A, vector<int> B);
void point9(vector<int> A, vector<int> B);


int main()
{
    setlocale(LC_ALL, "Russian");

    vector <int> U, A, B; // Создание множеств.
    int na, nb; // Мощности множеств A и B.

    // Множество U заполняется натуральными числами из промежутка [1, 50].
    for (int i = 0; i < 50; i++) 
        U.push_back(i + 1);

    // Пользователь вводит мощность множества А.
    cout << "Введите мощность множества A [<15]: ";
    cin >> na;
 
    // Пользователь вводит мощность множества B.
    cout << "Введите мощность множества B [<15]: ";
    cin >> nb;

    // Пользователь выбирает способ задания множества: Перечисление / Выражение.
    cout << "Как будут задаваться множества? [Введите цифру]\n1. Перечисление\n2. Высказывание\n";
    int choice = 0;
    cin >> choice; // Переменная для реализации выбора пользователем.

    // Если пользователь выбрал «Перечисление», то переходим ко вводу с клавиатуры.
    if (choice == 1)
    {
        // Пользователь вводит элементы множества А.
        cout << "Введите множество A: ";
        for (int i = 0; i < na; i++)
        {
            int element;
            cin >> element;
            A.push_back(element);
        }
        // Множество А выводится на экран.
        /*cout << "Множество A: ";
        for (int i = 0; i < na; i++)
            cout << A[i] << " ";
        cout << "\n";*/

        // Пользователь вводит элементы множества B.
        cout << "Введите множество B: ";
        for (int i = 0; i < nb; i++)
        {
            int element;
            cin >> element;
            B.push_back(element);
        }
        // Множество B выводится на экран.
        /*cout << "Множество B: ";
        for (int i = 0; i < nb; i++)
            cout << B[i] << " ";
        cout << "\n";*/
    }

    // Если пользователь выбрал «Высказывание», то множества заполняются автоматически.
    if (choice == 2)
    {
        int a; // Создаем переменную  а.
        for (int k = 0; k < na; k++)   
        {
            a = 2 * (k + 1) - 1; // Придаем a значение, равное 2k - 1.
            A.push_back(a); // Записываем а в множество А. 
        }
        // Множество А выводится на экран.
        /*cout << "Множество A: ";
        for (int i = 0; i < na; i++)
            cout << A[i] << " ";
        cout << "\n";*/

        int b; // Создаем переменную  b.
        for (int k = 0; k < nb; k++)
        {
            b = 3 * (k + 1) + 3; // Придаем a значение, равное 2k - 1.
            B.push_back(b); // Записываем а в множество А. 
        }
        // Множество B выводится на экран.
        /*cout << "Множество B: ";
        for (int i = 0; i < nb; i++)
            cout << B[i] << " ";
        cout << "\n";*/
    }

    
    // Программу будет выполняться до тех пор, пока пользователь не выберет пункт меню "Выход из программы".
    while (choice != 10)
    {
        // Множество А выводится на экран.
        cout << "Множество A: ";
        for (int i = 0; i < na; i++)
            cout << A[i] << " ";
        cout << "\n";
        // Множество B выводится на экран.
        cout << "Множество B: ";
        for (int i = 0; i < nb; i++)
            cout << B[i] << " ";
        cout << "\n";


        // Пользователь выбирает одну из предложенных операций.
        cout << "Какую операцию требуется выполнить? [Введите число]:\n" <<
            "1. Объединение\n" <<
            "2. Пересечение\n" <<
            "3. Разность A/B\n" <<
            "4. Разность B/A\n" <<
            "5. Симметрическая разность\n" <<
            "6. Дополнение A\n" <<
            "7. Дополнение B\n" <<
            "8. Произведение AxB\n" <<
            "9. Произведение BxA\n" <<
            "10. Выход из программы\n";
    
        cin >> choice;
        switch (choice)
        {
            // Если пользователь выбрал «Объединение», переходим к пункту 1.
        case 1:
            point1(A, B);
            break;
        // Если пользователь выбрал «Пересечение», переходим к пункту 2.
        case 2:
            point2(A, B);
            break;
        // Если пользователь выбрал «Разность А/В», переходим к пункту 3.
        case 3:
            point3(A, B);
            break;
        // Если пользователь выбрал «Разность В/А», переходим к пункту 4.
        case 4:
            point4(A, B);
            break;
        // Если пользователь выбрал «Симметрическая разность», переходим к пункту 5.
        case 5:
            point5(A, B);
            break;
        // Если пользователь выбрал «Дополнение А», переходим к пункту 6.
        case 6:
            point6(A, B, U);
            break;
        // Если пользователь выбрал «Дополнение В», переходим к пункту 7.
        case 7:
            point7(A, B, U);
            break;
        // Если пользователь выбрал «Произведение АхВ», переходим к пункту 8.
        case 8:
            point8(A, B);
            break;
        // Если пользователь выбрал «Произведение ВхА», переходим к пункту 9.
        case 9:
            point9(A, B);
            break;
        // Если пользователь выбрал «Выход из программы», происходит выход из цикла [завершение программы].
        case 10:
            cout << "[Exit]";
            break;
        default:
            choice = 10;
            break;
        }

        if (choice != 10)
        {
            system("pause");
            system("cls");
        }
    }

    // Выход из программы.
    return 0;
}


void point1(vector<int> A, vector<int> B)
{
    vector<int> C; // Программа создает пустое множество С.

    // Выбирается первый элемент множества А.
    // Выбранный элемент множества А записывается во множество С. 
    for (int i = 0; i < A.size(); i++)
        C.push_back(A[i]);

    for (int i = 0; i < B.size(); i++) // Выбираем элемент множества B.
    {
        for (int j = 0; j < A.size(); j++) // Выбираем первый элемент множества A.
        {
            if (B[i] == A[j]) // Если выбранный элемент множества А равен выбранному элементу множества В.
                break; // Выбираем следующий элемент множества B.
            
            // Если выбранный элемент множества А является последним и не равен выбранному элементу множества В.
            else if (j == A.size() - 1 && B[i] != A[j]) 
                C.push_back(B[i]); // Записываем выбранный элемент множества В в множество С.

            // Если выбранный элемент множества А не равен выбранному элементу множества В, выбираем следующий элемент множества А. 
        }
        // Если выбранный элемент множества В является последним, выход из цикла.
    }

    //Множество С выводится на экран
    cout << "Объединение множеств A и B: ";
    for (int i = 0; i < C.size(); i++) // Множество С является объединением множеств А и В
        cout << C[i] << " ";
    cout << "\n";
}

void point2(vector<int> A, vector<int> B)
{
    vector<int> D; // Программа создает пустое множество D.

    for (int i = 0; i < B.size(); i++) // Выбираем элемент множества B.
        for (int j = 0; j < A.size(); j++) // Выбираем элемент множества A.
            if (B[i] == A[j]) // Если выбранный элемент множества А равен выбранному элементу множества В.
                D.push_back(B[i]); // Выбранный элемент из множества В записывается в множество D.
    
    //Множество D выводится на экран
    cout << "Пересечение множеств A и B: ";
    for (int i = 0; i < D.size(); i++) // Множество D является пересечением множеств А и В.
        cout << D[i] << " ";
    cout << "\n";
}

void point3(vector<int> A, vector<int> B)
{
    vector<int> E; // Программа создает пустое множество E.

    for (int i = 0; i < A.size(); i++) // Выбираем элемент множества A.
    {
        for (int j = 0; j < B.size(); j++) // Выбираем элемент множества B.
        {
            if (A[i] == B[j]) // Если выбранный элемент множества А равен выбранному элементу множества В.
                break; // Выбираем следующий элемент множества A.
            
            // Если выбранный элемент множества А равен выбранному элементу множества В и не является последним
            else if (j == B.size() - 1 && B[j] != A[i]) 
                E.push_back(A[i]); // Записываем выбранный элемент множества В в множество E.
        }
    }

    //Множество E выводится на экран
    cout << "Разность множеств A/B: ";
    for (int i = 0; i < E.size(); i++) // Множество Е является разностью множеств А и В.
        cout << E[i] << " ";
    cout << "\n";
}

void point4(vector<int> A, vector<int> B)
{
    vector<int> F; // Программа создает пустое множество F.

    for (int i = 0; i < B.size(); i++) // Выбираем элемент множества B.
    {
        for (int j = 0; j < A.size(); j++) // Выбираем элемент множества A.
        {
            if (B[i] == A[j]) // Если выбранный элемент множества B равен выбранному элементу множества A.
                break; // Выбираем следующий элемент множества B.

            // Если выбранный элемент множества А равен выбранному элементу множества A и не является последним
            else if (j == A.size() - 1 && A[j] != B[i])
                F.push_back(B[i]); // Записываем выбранный элемент множества A в множество F.
        }
    }

    //Множество F выводится на экран
    cout << "Разность множеств B/A: ";
    for (int i = 0; i < F.size(); i++) // Множество F является разностью множеств B и A
        cout << F[i] << " ";
    cout << "\n";
}

void point5(vector<int> A, vector<int> B)
{
    vector<int> G; // Программа создает пустое множество G.

    for (int i = 0; i < A.size(); i++) // Выбираем элемент множества A.
    {
        for (int j = 0; j < B.size(); j++) // Выбираем элемент множества B.
        {
            if (A[i] == B[j]) // Если выбранный элемент множества А равен выбранному элементу множества В.
                break; // Выбираем следующий элемент множества A.

            // Если выбранный элемент множества А равен выбранному элементу множества В и не является последним
            else if (j == B.size() - 1 && B[j] != A[i])
                G.push_back(A[i]); // Записываем выбранный элемент множества В в множество G.
        }
    }

    for (int i = 0; i < B.size(); i++) // Выбираем элемент множества B.
    {
        for (int j = 0; j < A.size(); j++) // Выбираем элемент множества A.
        {
            if (B[i] == A[j]) // Если выбранный элемент множества B равен выбранному элементу множества A.
                break; // Выбираем следующий элемент множества B.

            // Если выбранный элемент множества А равен выбранному элементу множества A и не является последним
            else if (j == A.size() - 1 && A[j] != B[i])
                G.push_back(B[i]); // Записываем выбранный элемент множества A в множество G.
        }
    }

    //Множество G выводится на экран
    cout << "Симметрическая разность множеств A и B: ";
    for (int i = 0; i < G.size(); i++) // Множество G является разностью множеств B и A
        cout << G[i] << " ";
    cout << "\n";
}

void point6(vector<int> A, vector<int> B, vector<int> U)
{
    vector<int> H; // Программа создает пустое множество Н.

    for (int i = 0; i < U.size(); i++) // Выбираем элемент множества A. 
    {
        for (int j = 0; j < A.size(); j++) // Выбираем элемент множества U. 
        {
            // Если выбранный элемент множества U равен выбранному элементу множества А. 
            if (U[i] == A[j]) 
                break; // Выбираем следующий элемент множества U.
            // Если элемент множества A является последним, то элемент множества U записывается в H.
            if (j == A.size() - 1 && U[i] != A[j])
                H.push_back(U[i]); // Элемент записывается в Н.
        }
    }

    // Множество Н выводится на экран.
    for (int i = 0; i < H.size(); i++) // Множество Н является дополнением множества A до U.
        cout << H[i] << " ";
    cout << "\n";
}

void point7(vector<int> A, vector<int> B, vector<int> U)
{
    vector<int> I; // Программа создает пустое множество I.

    for (int i = 0; i < U.size(); i++) // Выбираем элемент множества B. 
    {
        for (int j = 0; j < B.size(); j++) // Выбираем элемент множества U. 
        {
            // Если выбранный элемент множества U равен выбранному элементу множества B. 
            if (U[i] == B[j])
                break; // Выбираем следующий элемент множества U.
            // Если элемент множества A является последним, то элемент множества U записывается в I.
            if (j == B.size() - 1 && U[i] != B[j])
                I.push_back(U[i]); // Элемент записывается в I.
        }
    }

    // Множество I выводится на экран.
    for (int i = 0; i < I.size(); i++) // Множество I является дополнением множества B до U.
        cout << I[i] << " ";
    cout << "\n";
}

void point8(vector<int> A, vector<int> B)
{
    vector <pair <int, int>> J;
    for (int i = 0; i < A.size(); i++) // Выбираем элемент множества A.
    {
        for (int j = 0; j < B.size(); j++) // Выбираем элемент множества B. 
        {
            //Записываем элемент множества А в начало кортежа.
            //Записываем элемент множества В в конец кортежа.
            pair <int, int> element = make_pair(A[i], B[j]);
            J.push_back(element); // Добавляем кортеж в множество J.
        }
    }

    // Множество J Выводится на экран.
    for (int i = 0; i < J.size(); i++) // Множество J является декартовым произведением множеств А и В
        cout << " <" << J[i].first << ", " << J[i].second << "> ";
    cout << "\n";
}

void point9(vector<int> A, vector<int> B)
{
    vector <pair <int, int>> K;
    for (int i = 0; i < B.size(); i++) // Выбираем элемент множества B.
    {
        for (int j = 0; j < A.size(); j++) // Выбираем элемент множества A. 
        {
            //Записываем элемент множества А в начало кортежа.
            //Записываем элемент множества В в конец кортежа.
            pair <int, int> element = make_pair(B[i], A[j]);
            K.push_back(element); // Добавляем кортеж в множество K.
        }
    }

    // Множество K Выводится на экран.
    for (int i = 0; i < K.size(); i++) // Множество K является декартовым произведением множеств B и A
        cout << " <" << K[i].first << ", " << K[i].second << "> ";
    cout << "\n";
}
